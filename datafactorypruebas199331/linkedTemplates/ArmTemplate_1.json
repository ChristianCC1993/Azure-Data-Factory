{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactorypruebas199331"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/13-UnPivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceDataExportacion"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDataExportacion"
						}
					],
					"transformations": [
						{
							"name": "unpivot"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Empresas as string,",
						"          Frutas as string,",
						"          Cliente as string,",
						"          {Cantidad (Kg)} as short,",
						"          {Año} as short,",
						"          {Ventas EE.UU. KG} as short,",
						"          {Ventas China KG} as short,",
						"          {Ventas España KG} as short,",
						"          {Ventas Francia KG} as short,",
						"          {Ventas Canada KG} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: '13.UnPivot',",
						"     fileName: 'DataExportacionNoEstructurada.xlsx',",
						"     sheetName: 'Data Exportacion',",
						"     firstRowAsHeader: true) ~> sourceDataExportacion",
						"sourceDataExportacion unpivot(output(",
						"          Pais as string,",
						"          {Precio(Kg)} as short",
						"     ),",
						"     ungroupBy(Empresas,",
						"          Frutas,",
						"          Cliente,",
						"          {Cantidad (Kg)},",
						"          {Año}),",
						"     pivotValues: ['Ventas EE.UU. KG', 'Ventas China KG', 'Ventas España KG', 'Ventas Francia KG', 'Ventas Canada KG'],",
						"     lateral: true,",
						"     ignoreNullPivots: true) ~> unpivot",
						"unpivot derive(Posicion1 = instr(Pais,' '),",
						"          Posicion2 = instr(Pais,' KG'),",
						"          PAIS = substring(Pais,instr(Pais, ' '),instr(Pais, ' KG')-instr(Pais, ' '))) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Empresas,",
						"          Frutas,",
						"          Cliente,",
						"          {Cantidad (Kg)},",
						"          {Año},",
						"          Pais = derivedColumn1@PAIS,",
						"          {Precio(Kg)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '13.UnPivot',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['DataExxportacion-UnPivot.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkDataExportacion"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/14-Window')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_ASQL_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProductocategoria"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductoCategoria"
						}
					],
					"transformations": [
						{
							"name": "window"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CategoriaID as integer,",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          Cantidad as integer,",
						"          Total as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.ProductCategoryID CategoriaID, PC.Name Categoria, P.Name Producto, OD.UnitPrice, 100 Cantidad,\\n     (OD.UnitPrice*100) Total\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProductocategoria",
						"sourceProductocategoria window(over(CategoriaID),",
						"     asc(CategoriaID, true),",
						"     SUM = toDecimal(sum(UnitPrice*Cantidad)),",
						"          AVG = toDecimal(avg(UnitPrice*Cantidad)),",
						"          COUNT = count(UnitPrice*Cantidad),",
						"          MAX = toDecimal(max(UnitPrice*Cantidad)),",
						"          MIN = toDecimal(min(UnitPrice*Cantidad))) ~> window",
						"window sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '14.Window',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Productocategoria.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductoCategoria"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/15-Rank')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_ASQL_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProductocategoria"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductoCategoria"
						}
					],
					"transformations": [
						{
							"name": "window"
						},
						{
							"name": "rank"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CategoriaID as integer,",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          Cantidad as integer,",
						"          Total as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.ProductCategoryID CategoriaID, PC.Name Categoria, P.Name Producto, OD.UnitPrice, 100 Cantidad,\\n     (OD.UnitPrice*100) Total\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProductocategoria",
						"sourceProductocategoria window(over(CategoriaID),",
						"     asc(CategoriaID, true),",
						"     SUM = toDecimal(sum(UnitPrice*Cantidad)),",
						"          AVG = toDecimal(avg(UnitPrice*Cantidad)),",
						"          COUNT = count(UnitPrice*Cantidad),",
						"          MAX = toDecimal(max(UnitPrice*Cantidad)),",
						"          MIN = toDecimal(min(UnitPrice*Cantidad))) ~> window",
						"window rank(asc(Total, true),",
						"     caseInsensitive: true,",
						"     output(Ranking as long),",
						"     dense: true) ~> rank",
						"rank sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '15.Ranking',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Productocategoria.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductoCategoria"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/2-New Branch')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_ASQL_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkproductCSV"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductJSON"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT *\\nFROM SalesLT.Product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '2. New Branch',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('Product_',toString(currentDate()),'.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkproductCSV",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'json',",
						"     container: 'dataflowdataset',",
						"     folderPath: '2. New Branch',",
						"     partitionFileNames:[(concat('Product_',toString(currentDate()),'.JSON'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductJSON"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/3-Join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProducto"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSubCategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductInnerJoin"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductoId as short,",
						"          NombreProducto as string,",
						"          ProductoSubCategoriaId as short,",
						"          Descripcion as string,",
						"          Categoria as string,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: '3.Join',",
						"     fileName: 'Producto.xlsx',",
						"     sheetName: 'Producto',",
						"     firstRowAsHeader: true) ~> sourceProducto",
						"source(output(",
						"          SubCategoriaProductoId as short,",
						"          NombreSubCategoria as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'excel',",
						"     container: 'dataflowdataset',",
						"     folderPath: '3.Join',",
						"     fileName: 'SubCategoriaProducto.xlsx',",
						"     sheetName: 'SubCategoriaProducto',",
						"     firstRowAsHeader: true) ~> sourceSubCategoriaProducto",
						"sourceProducto, sourceSubCategoriaProducto join(ProductoSubCategoriaId == SubCategoriaProductoId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '3.Join',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('ProductInnerJoin_',toString(currentDate()),'.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkProductInnerJoin"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/4-Conditional Split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_ASQL_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductRed"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductBlue"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkProductBlack"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkOtros"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplitProduct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'SalesLT',",
						"     tableName: 'Product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceProduct",
						"sourceProduct split(Color==\"Red\",",
						"     Color==\"Blue\",",
						"     Color==\"Black\",",
						"     disjoint: false) ~> ConditionalSplitProduct@(Red, Blue, Black, Otros)",
						"ConditionalSplitProduct@Red sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '4.Condicional Split',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductRed.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductRed",
						"ConditionalSplitProduct@Blue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '4.Condicional Split',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductBlue.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductBlue",
						"ConditionalSplitProduct@Black sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '4.Condicional Split',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductBlack.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkProductBlack",
						"ConditionalSplitProduct@Otros sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '4.Condicional Split',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductOtros.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkOtros"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/5-Exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCliente"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceServicio"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "ClienteExists"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "ClienteNotExists"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						},
						{
							"name": "NoExists"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CodCliente as short,",
						"          Cliente as string,",
						"          ApePatern as string,",
						"          FechaNaci as date 'dd/MM/yyyy',",
						"          DNI as integer,",
						"          IdServicio as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '5.Exists',",
						"     fileName: 'Cliente.csv',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceCliente",
						"source(output(",
						"          IdServicio as short,",
						"          Servicio as string,",
						"          Fecha as date 'dd/MM/yyyy',",
						"          MontoPagar as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '5.Exists',",
						"     fileName: 'Servicios.csv',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceServicio",
						"sourceCliente, sourceServicio exists(sourceCliente@IdServicio == sourceServicio@IdServicio,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"sourceCliente, sourceServicio exists(sourceCliente@IdServicio == sourceServicio@IdServicio,",
						"     negate:true,",
						"     broadcast: 'auto')~> NoExists",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '5.Exists',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ClienteExists.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ClienteExists",
						"NoExists sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '5.Exists',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ClienteNotExists.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ClienteNotExists"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/6-Union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceMovie1"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceMovie2"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sourceMovie3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkMovie"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "union2"
						}
					],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '6.Union',",
						"     fileName: 'DataSetMovie1.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceMovie1",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '6.Union',",
						"     fileName: 'DataSetMovie2.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false) ~> sourceMovie2",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '6.Union',",
						"     fileName: 'DataSetMovie3.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceMovie3",
						"sourceMovie1, sourceMovie2 union(byName: false)~> union1",
						"union1, sourceMovie3 union(byName: true)~> union2",
						"union2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '6.Union',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Movie.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkMovie"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/7-Lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCliente"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CodCliente as short,",
						"          Cliente as string,",
						"          ApePatern as string,",
						"          FechaNaci as string,",
						"          DNI as integer,",
						"          IdServicio as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '7.Lookup',",
						"     fileName: 'Cliente.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source(output(",
						"          IdServicio as short,",
						"          Servicio as string,",
						"          Fecha as date 'dd/MM/yyyy',",
						"          MontoPagar as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '7.Lookup',",
						"     fileName: 'Servicios.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source2",
						"source1, source2 lookup(source1@IdServicio == source2@IdServicio,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '7.Lookup',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ReporteCliente.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCliente"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/8-Derived Column')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_ASQL_AWDW2",
								"type": "LinkedServiceReference"
							},
							"name": "sourceCategoriaProducto"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LinkedServices_StorageUdemyLaboratorio",
								"type": "LinkedServiceReference"
							},
							"name": "sinkCategoriaProducto"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Categoria as string,",
						"          Producto as string,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PC.Name Categoria, P.Name Producto, OD.UnitPrice, OD.UnitPriceDiscount\\nFROM [SalesLT].[ProductCategory] AS PC\\n     INNER JOIN [SalesLT].[Product] AS P ON P.ProductCategoryID=PC.ProductCategoryID\\n     INNER JOIN [SalesLT].[SalesOrderDetail] AS OD ON OD.ProductID=P.ProductID',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceCategoriaProducto",
						"sourceCategoriaProducto derive(CATEGORIA = upper(Categoria),",
						"          Producto = upper(Producto),",
						"          {monto Total} = toDecimal(UnitPrice-UnitPriceDiscount)) ~> derivedColumn",
						"derivedColumn select(mapColumn(",
						"          Producto,",
						"          categoria = derivedColumn@CATEGORIA,",
						"          {monto Total}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'dataflowdataset',",
						"     folderPath: '9.Select',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ProductoCategoria.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkCategoriaProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/10-Aggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "10-Aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCategoriaProducto": {},
									"sinkCategoriaProducto": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/11-Surreogate Key')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Surrogate Key",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "11-Surrogate Key",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCategoriaProducto": {},
									"sinkCategoriaProducto": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/12-Pivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Pivot",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "12-Pivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/13-UnPivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow UnPivot",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "13-UnPivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceDataExportacion": {},
									"sinkDataExportacion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/13-UnPivot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/14-Window')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Window",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "14-Window",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProductocategoria": {},
									"sinkProductoCategoria": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/14-Window')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/15-Ranking')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Ranking",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "15-Rank",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProductocategoria": {},
									"sinkProductoCategoria": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/15-Rank')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2-New Branch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Product",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "2-New Branch",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sinkproductCSV": {},
									"sinkProductJSON": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/2-New Branch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3-Join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Join",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "3-Join",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProducto": {},
									"sourceSubCategoriaProducto": {},
									"sinkProductInnerJoin": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/3-Join')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4-Conditional Split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Conditional Split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "4-Conditional Split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceProduct": {},
									"sinkProductRed": {},
									"sinkProductBlue": {},
									"sinkProductBlack": {},
									"sinkOtros": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/4-Conditional Split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5-Exists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow Exists",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "5-Exists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCliente": {},
									"sourceServicio": {},
									"ClienteExists": {},
									"ClienteNotExists": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "3. DataFlow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/5-Exists')]"
			]
		}
	]
}